1.运算符
        %取余数
	！（非） &&（并且） ||（或）

2.循环语句
    2.1
	【if】

	if (3>2)
		printf("");
	else
		printf("");
	if (3)
		printf("");  //输出
	if （0）
		printf("");  //不输出
	if （0 == 0）
		printf("");  //输出

	【if的范围】
	if（2>3）
		printf（“aaaa”）；
		printf（“bbbb”）；	
         //输出结果为： bbbb   所以第二条printf不属于if语句范畴，【if默认            只能控制一个语句的执行】
	  如果要同时控制两条语句的话必须
           if（2>3）
		{
			printf（“aaaa”）；
		        printf（“bbbb”）；
		
		}

         【else if】
  		if (1)
			A;
		else if (2)
			B;
		else if (3)
			C;
		else 
			D;

	2.2
        【for】

	for(1; 2; 3)
		for(4; 5; 6)
		     A;
		     B;
        1→2→4→(5→A→6)→3→2→4.......
                 内部循环
	      4→5(不成立)→3→2→4.....

       【for（i=0;i<3;++i）
	      for (j=2;j<5;++j)
		   printf("哈哈\n");
	           printf（“嘻嘻\n”）；】
                 9个哈哈 一个嘻嘻


       【for（i=0;i<3;++i）
	         printf("嘿嘿\n");
	         for (j=2;j<5;++j)
	    	      printf("哈哈\n");
	         printf（“嘻嘻\n”）；】
              3个嘿嘿 3个哈哈 一个嘻嘻  （一个循环只能控制一个语句）

	2.3
	【while】
       语句形式：            
         i = 1；                         for (i=1; i <101; ++i)
	 while (i < 101)    等价于            
            {                                    sum = sum + i;
              sum = sum + 1;			 
		++i;                          
            }

	【do while】
	 主要用于人机交互
	do
	{
         ......
	 }while(表达式)

	【switch】
	switch（val）
	{
          case 1:
		printf("a\n");
		break;
          case 2:
		printf("b\n");
		break;
          case 3:
		printf("c\n");
		break;
	//default("默认")
		printf("d\n");
		break;
	  
         }


【栈】  先进后出

3.函数

	break；  是终止循环的
	return;  是终止函数的

	【函数分类】
	有参函数 和 无参函数
	有返回值函数 和 无返回值函数
	库函数 和 用户自定义函数
	普通函数 和 主函数（main）  一个函数只能有一个主函数

	【函数声明】
	不想对函数进行排序的时候，可以使用函数声明
	       void main(void);   //分号不能丢
	没有返回值       没有形参

	函数是C语言的基本单位

	
4.指针

	指针是地址
	指针变量是存放地址的变量	

	地址可以相减运算

	一个指针变量占几个字节
	预备知识：
		sizeof(数据类型)
	     	功能：返回值就是改数据类型所占的字节数
		例子： sizeof（int）=4  sizeof（char）=1
			sizeof（double）=8
		sizeof（变量名）
		功能：返回值是该变量所占的字节数
	假设p指向char类型变量（1个字节）
	假设p指向int类型变量（4个字节）
	假设p指向double类型变量（8个字节）

	一个指针变量无论它指向的变量占几个字节，它本身占4个字节

【专题】
	 动态内存分配 
		传统数组的缺点：
		   1.数组长度必须事先制定，且只能是常整数，不能是变量
		举例：
			int a[5];//ok
			int len = 5; int a[len];//error
		   2.传统形式定义的数组，该数组的内存程序员无法手动释放
		      在一个函数运行时，系统为函数中数组所分配的空间会一直存在，直到该数组运行完毕，数组的空间才会被系统释放
	
		   3.数组的长度不能再函数运行的过程中动态的扩充或缩小	   4.A函数定义的数组在A函数运行期间可以被其他函数使用，但A函数运行完毕之后A函数的数组将无法被其他函数使用


	为什么需要动态内存分配？
		动态数组很好的解决了传统数组的4个缺陷   （堆）
		传统数组叫做静态数组   （栈）


	动态内存举例：
	malloc函数   是memory allocate（内存分配）缩写


【结构体】
		struct Student
		{
			int age;
			float score;
			char sex;
		};
		
		int main(void)
		{
			struct Student st = {88, 66.6, 'A'};
			struct Student * pst = &st;

			pst->age = 88 ; //  等价于（*pst).age=st.age
			st.age = 10;

			return 0;
		}

【补码】
		原码
			也叫 符号-绝对值
			最高位0表示正 1表示负，其余二进制位是该数字的绝对值的二进制位

			原码简单易懂
			加减运算复杂
			存在加减乘除四种运算，增加了cpu的复杂度
			零的表示不唯一

		反码
			反码运算不便，也没有在计算机中应用

		移码
			移码表示数值的平移n位，n称为移码量
			移码只要用于浮点数的阶码的储存

		补码
			十进制转二进制
				正整数转二进制
					除2取余，直至商为零，余数倒叙排序

				负整数转二进制
					先求该数正整数补码，然后所有位取反，
					末尾加1，不够位数时，左边补1。

				零转二进制
					全部都是零

			二进制转十进制
				如果首位是0.表示正整数，按普通方法求。

				如果首位是1，表示负整数
					将所有位取反，末尾加1，所得数字就是负数的绝对值

				如果首位是1，表示是负整数
					将所有位取反，末尾加1，所得数字就是改负数的绝对值。

【链表】
		专业术语：
			头结点
			头指针
			首节点
			尾节点



		算法：
			通俗定义
				解题的方法和步骤
			狭义定义
				对储存数据的操作
			广义定义
				广义的算法也叫泛型
				无论数据是如何存储的，对该数据的操作都是一样的

		我们至少可以通过两种结构来存储数据
			数组
				优点：
					存储速度快
				缺点
					需要一个连续的很大的内存
					插入和删除元素的效率很低
			链表	
				优点：
					插入删除元素效率高
					不需要一个连续的很大的内存
				缺点：
					查找某个位置的元素效率低








  